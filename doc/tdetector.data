TDetector
tdetector.html
/users/data12/pion/ehrhardt/tofPack2/include/detector.h
CTDetector
107 TDetector
O#c2
PmatIn
106 TMaterial&
=
PdetNumIn
0 int
=
DConstructor. Defines the detectors material (Note that just a pointer and no copy of the material is saved), the maximum number of elements and the detector ID. 
=
CTDetector
107 TDetector
O#c3
Pdet
107 TDetector&
Sconst
=
DCopy constructor.
=
CTDetector
107 TDetector
O#c4
DDefault constructor. 
=
gnumElements
0 int
O#v2
D
=
gstackType
0 int
O#v3
D
=
gcircular
6 bool
O#v4
D
=
gdetNum
0 int
Sconst
O#v5
D
=
gv_shape
151 volumeShape**
O#v6
D
=
gmat
106 TMaterial*
O#v7
D
=
gdefined
6 bool
O#v8
D
=
F~TDetector
-1 ~TDetector
O#f2
DDestructor 
=
FgetDetectorNumber
0 int
O#f3
Lconst
DReturns the detector ID. 
=
FgetStackType
0 int
O#f4
Lconst
DReturns the stack-type-property. It defines how the elements shapes are generated out of the first one.  
DSee the getNext()-method for the corresponding shape. 
=
FgetNumberOfElements
0 int
O#f5
Lconst
DReturns the number of elements defined for the detector. 
=
FgetID
0 int
O#f6
Lconst
DReturns the detectors ID. 
=
FisCircular
6 bool
O#f7
Lconst
DReturns true if the first elements shape neighbours the last one. There is no check done if this is really true and the property has to be set by the user. 
=
FgetMaterial
106 TMaterial*
O#f8
Lconst
DReturns a pointer to the material the detector is made up. 
=
FgetOverallShape
151 volumeShape*
O#f9
Lconst
DReturns the overall shape of the detector if for the detectors shapes a getEnvelope-routine is correctly implemented.  
DTake care, that this pointer is correctly deleted after use. 
=
FgetShape
151 volumeShape*
O#f10
Lconst
PElementNumber
0 int
=
DReturns a pointer to the shape of the <var>ElementNumber<sup>th</sup></var> element. 
DReturns NULL if <var>ElementNumber</var> is non-valid. 
DDo not delete this pointer, it is the only one we've got. 
=
FsetNumberOfElements
7 void
O#f11
Pnum
0 int
=
DSets the number of elements and creates new volume shapes for the detector elements. Advice, first set the number of elements and later the shape of the first element to save new and delete operations. 
=
FsetStackType
7 void
O#f12
Pst
0 int
=
DSets the stack type property of the detector elements. Defines how the shapes of the elements of the detector are generated out of the first one. For additional information see the getNext routine of the corresponding shape. 
=
FsetMaterial
7 void
O#f13
Pm
106 TMaterial&
=
DSets the detectors material. Note that only a pointer is set and no copy is made: the material should persist in memory as long as it is used in the detector. 
=
FsetShapeFirstElement
7 void
O#f14
Psh
151 volumeShape*
=
DSets the shape of the first element. The pointer is saved and for all other elements the element volume shape is generated using the getNext() routine and the stackType property. 
=
FsetShapes
7 void
O#f15
Pn
0 int
=
Pshapes
151 volumeShape**
=
DSets all shapes of all detector-elements in one go. Use this if you don't want to use the getNext()-method, the shapes provide.
=
FsetCircular
7 void
O#f16
Pcirc
6 bool
Vtrue
=
DSets the circular property. This tells weather the last elements neighbours the first one. It is an additional property without any consequences on element shape generation. 
=
Foperator=
7 void
O#f17
Pd
107 TDetector&
Sconst
=
DCopy operator. 
=
FisDefined
6 bool
O#f18
Lconst
DReturns true if the detector has been modified since its creation. 
=
S0 1 TBase
tbase.html
TBase
=
