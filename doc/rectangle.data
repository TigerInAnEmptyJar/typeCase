rectangle
rectangle.html
/users/data12/pion/ehrhardt/tofPack2/include/planeShape.h
Crectangle
-1 rectangle
O#c2
PA
16 point3D
Vpoint3D()
=
PB
16 point3D
Vpoint3D()
=
Pnorm
17 vector3D
Vvector3D()
=
Pwidth
1 float
V0
=
DConstructor. Creates a rectangle with points <var>A</var> and <var>B</var>. Together with the normal vector <var>norm</var> this defines a plane. 
DThe other two points are calculates using the rectangle restriction (two opposing edges have the same length, the angle between to edges is PI/2) and the <var>width</var> parameter. 
=
Crectangle
-1 rectangle
O#c3
PCe
16 point3D
=
PN
17 vector3D
=
PA
16 point3D
Vpoint3D()
=
PB
16 point3D
Vpoint3D()
=
PC
16 point3D
Vpoint3D()
=
PD
16 point3D
Vpoint3D()
=
DConstructor. Creates a rectangle with center <var>Ce</var>, normal <var>N</var> and the points <var>A</var>, <var>B</var>, <var>C</var> and <var>D</var>.
=
Crectangle
-1 rectangle
O#c4
Ps
152 planeShape&
Sconst
=
DCopy constructor. Copies center and normal. If <var>s</var> is a rectangle, also the points are copied. 
=
Crectangle
-1 rectangle
O#c5
Pdescription
129 shape_parameter&
Sconst
=
DConstructor. Creates a rectangle out of the values of the parameter.
=
vleft
22 lLine3D
O#v2
Dthe other edge of the rectangle
=
vright
22 lLine3D
O#v3
Done of the edges of the rectangle
=
F~rectangle
-1 virtual
O#f2
DDestructor 
=
FgetNumberOfPoints
0 int
Svirtual
O#f3
Lconst
DReturns the number of points of the rectangle: 4. 
=
FgetPoint
16 point3D
Svirtual
O#f4
Lconst
Pnum
0 int
=
DReturns the <var>num<sup>th</sup></var> point of the rectangle. 
=
FA
16 point3D
O#f5
Lconst
DReturn point A of the rectangle. 
=
FB
16 point3D
O#f6
Lconst
DReturn point B of the rectangle. 
=
FC
16 point3D
O#f7
Lconst
DReturn point C of the rectangle. 
=
FD
16 point3D
O#f8
Lconst
DReturn point D of the rectangle. 
=
Farea
1 float
Svirtual
O#f9
Lconst
DReturns the area of the rectangle. 
=
FgetWidth
1 float
O#f10
Lconst
DReturns the width, the distance between points B and C. 
=
FgetLength
1 float
O#f11
Lconst
DReturns the length, the distance between points A and B. 
=
FsetPoints
7 void
O#f12
PA
16 point3D
=
PB
16 point3D
=
Pnorm
17 vector3D
=
Pwidth
1 float
=
DSet the points <var>A</var> and <var>B</var>. Together with the normal vector <var>norm</var>, the <var>width</var> and the rectangle restriction(two opposing edges have the same length, the angle between to edges is PI/2), the other points are calculated.  
=
FAB
22 lLine3D
O#f13
Lconst
DReturns the edge between the points A and B. 
=
FBC
22 lLine3D
O#f14
Lconst
DReturns the edge between the points B and C. 
=
FCD
22 lLine3D
O#f15
Lconst
DReturns the edge between the points C and D. 
=
FDA
22 lLine3D
O#f16
Lconst
DReturns the edge between the points D and A. 
=
FangularRange_Phi
1 float
Svirtual
O#f17
Lconst
Porigin
16 point3D&
Sconst
Vpoint3D(0,0,0)
=
PzDirection
17 vector3D&
Sconst
Vvector3D(0,0,1)
=
DReturns the polar angular range of a rectangle, for any z direction and origin.    
=
FangularRange_Theta
1 float
Svirtual
O#f18
Lconst
Porigin
16 point3D&
Sconst
Vpoint3D(0,0,0)
=
PzDirection
17 vector3D&
Sconst
Vvector3D(0,0,1)
=
DReturns the azimuthal angular range of a rectangle, for any z direction and origin.    
=
FdistancePlane
17 vector3D
Svirtual
O#f19
Pp
23 plane3D&
Sconst
=
DReturns the distance vector for a plane to the rectangle.  
=
Fdistance
17 vector3D
Svirtual
O#f20
Pline
21 sLine3D&
Sconst
=
DReturns the distance vector from a line to the rectangle  
=
Foperator=
7 void
O#f21
Pr
-1 rectangle&
Sconst
=
DCopy operator.  
=
FDraw
7 void
Svirtual
O#f22
Lconst
Peye
16 point3D&
Sconst
=
Pplane
23 plane3D&
Sconst
=
PboundingBox
19 vector4D*
=
PlColor
0 int
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a <a href=    
D"http://root.cern.ch">root</a>-<a href=    
D"http://root.cern.ch/root/html/TCanvas.html">TCanvas</a>.        
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>.        
DIt is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.      
=
FDraw
7 void
Svirtual
O#f23
Lconst
Peye
16 point3D&
Sconst
Vpoint3D(0,0,0)
=
Pplane
23 plane3D&
Sconst
Vplane3D(point3D(0,0,1),vector3D(0,0,1))
=
PboundingBox
19 vector4D*
VNULL
=
Pident
-1 TObject**
VNULL
=
PlColor
0 int
V1
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a <a href=   
D"http://root.cern.ch">root</a>-<a href=   
D"http://root.cern.ch/root/html/TCanvas.html">TCanvas</a>.       
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>.       
DIt is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.       
DThe parameter <var>ident</var> will return a pointer to the drawn root-primitive to provide the distance-to-primitive functionality.      
=
Fdescription
129 shape_parameter
Svirtual
O#f24
Lconst
DReturns a description of this rectangle.
=
FgetDescription
129 shape_parameter
Sstatic
O#f25
DStatic method. Returns a default description of a rectangle with all necessary variables defined.
=
S0 1 planeShape
planeshape.html
planeShape
=
