lLine2D
lline2d.html
/users/data12/pion/ehrhardt/tofPack2/include/geometry.h
ClLine2D
-1 lLine2D
O#c2
DDefault constructor.
=
ClLine2D
-1 lLine2D
O#c3
Pp
14 point2D&
Sconst
Tpoint2d.html
=
Pq
14 point2D&
Sconst
Tpoint2d.html
=
DConstructor. Sets the end points.
=
ClLine2D
-1 lLine2D
O#c4
Pp
14 point2D&
Sconst
Tpoint2d.html
=
Pv
15 vector2D&
Sconst
Tvector2d.html
=
DConstructor. First end point is <var>p</var>, second end point is <var>p+v</var>.
=
ClLine2D
-1 lLine2D
O#c5
Pl
-1 lLine2D&
Sconst
=
DCopy constructor.
=
gpPoint
14 point2D
O#v2
Tpoint2d.html
D
=
gqPoint
14 point2D
O#v3
Tpoint2d.html
D
=
FP
14 point2D
O#f2
Tpoint2d.html
Lconst
DReturns the first end point of the limited straight line.
=
FQ
14 point2D
O#f3
Tpoint2d.html
Lconst
DReturns the second end point of the limited straight line.
=
FDirection
15 vector2D
O#f4
Tvector2d.html
Lconst
DReturns the direction from P to Q.
=
FMid
14 point2D
O#f5
Tpoint2d.html
Lconst
DReturn the mid of the line.
=
FisIn
0 int
O#f6
Lconst
Pp
14 point2D&
Sconst
Tpoint2d.html
=
DReturns true if the distance of <var>p</var> to the line is smaller than __prec (1e-6)
=
FnewLine
7 void
O#f7
Pp
14 point2D&
Sconst
Tpoint2d.html
=
Pq
14 point2D&
Sconst
Tpoint2d.html
=
DAssign a new line.
=
FgetRep
-1 repTD
O#f8
Lconst
DReturns the representation of the line.
=
Flength
3 double
O#f9
Lconst
DReturns the length of the line.
=
FsetRep
7 void
O#f10
Pr
-1 repTD
=
DSet the representation of the line, this can be eigther _cartesic_ or _polar_.
=
FgetState
-1 geomState
O#f11
Lconst
DReturns the state of the geometrical object. This can be _regular_, _undefined_, _infinite_ or _zero_.
=
FgetDimension
0 int
O#f12
Lconst
DReturns the dimension of the line which is 2.
=
FZero
7 void
O#f13
DSets the state of the object to _zero_.
=
Foperator=
7 void
O#f14
Pl
-1 lLine2D&
Sconst
=
DCopy operator.
=
Foperator-
15 vector2D
O#f15
Tvector2d.html
Lconst
Pp
14 point2D&
Sconst
Tpoint2d.html
=
DReturns the distance of point <var>p</var> to the line.
=
Foperator-
-1 lLine2D
O#f16
Lconst
Pl
-1 lLine2D&
Sconst
=
DReturns the line of closest approach between two straight lines. If the lines intersect, both endpoints of the resulting line are the intersection point. If they don't intersect, the first endpoint lies on this line the second on <var>l</var>.
=
Foperator&&
14 point2D
O#f17
Tpoint2d.html
Lconst
Pl
-1 lLine2D&
Sconst
=
DReturns the intersection point of two limited straight lines.
=
Foperator&
3 double
O#f18
Lconst
Pl
-1 lLine2D&
Sconst
=
DReturns the distance between two limited straight lines.
=
FtoString
-1 string
Svirtual
O#f19
Lconst
Ppt
0 int
V-1
=
DReturns a string representation of the point. Depending on <var>pt</var> this can be eigther _cartesic_, _polar_ or in the points own representation (<var>pt</var>=-1, default) for the direction vector.
=
fInfinite
7 void
O#f20
DSets the state of the object to _infinite_.
=
fUndefined
7 void
O#f21
DSets the state of the object to _undefined_. 
=
fRegular
7 void
O#f22
DSets the state of the object to _regular_.
=
DThis is a limited straight line in 2-dimensions. In eukledean space the shortest connection between two points P and Q.
S0 1 geomObject
geomObj.html
geomObject
=
