fiber
fiber.html
/users/data12/pion/ehrhardt/tofPack2/include/fiber.h
Cfiber
-1 fiber
O#c2
Pcor
16 point3D
Vpoint3D(0,0,0)
=
Pd1
17 vector3D
Vvector3D(1,0,0)
=
Pd2
17 vector3D
Vvector3D(0,1,0)
=
Pd3
17 vector3D
Vvector3D(0,0,1)
=
Phalved
0 int
V0
=
Phalvedat
0 int
V0
=
DConstructor. Sets a fiber. <var>cor</var> is one of the corner points and with the three vectors <var>d1</var>, <var>d2</var> and <var>d3</var> it defines a volume with any two opposing areas being parallel. 
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur. 
=
Cfiber
-1 fiber
O#c3
Ps
151 volumeShape&
Sconst
=
DCopy constructor. Works only if the shape is a fiber. 
=
Cfiber
-1 fiber
O#c4
Ps
-1 fiber&
Sconst
=
DCopy constructor. 
=
Cfiber
-1 fiber
O#c5
Pdescription
129 shape_parameter&
Sconst
=
DConstructor. Creates a fiber with the values from the parameter.
=
vcorner
16 point3D
O#v2
DThe corner of the fiber. 
=
vdir1
17 vector3D
O#v3
DOne of the three direction vectors a fiber defines. 
=
vdir2
17 vector3D
O#v4
DOne of the three direction vectors a fiber defines. 
=
vdir3
17 vector3D
O#v5
DOne of the three direction vectors a fiber defines. 
=
vnumberOfHalvedElements
0 int
O#v6
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
vhalvedAt
0 int
O#v7
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
FgetCorner
16 point3D
Svirtual
O#f2
Lconst
DReturns the corner of the fiber. 
=
FgetDirection
17 vector3D
Svirtual
O#f3
Lconst
Pnum
0 int
=
DReturns the <var>num<sup>th</sup></var> direction vector of the fiber. Returns an undefined vector if <var>num</var> is non valid. 
=
FsetCorner
7 void
O#f4
Pp
16 point3D
=
DSets the corner of the fiber. 
=
FsetDirection
7 void
O#f5
Pnum
0 int
=
Pv
17 vector3D
=
DSets the <var>num<sup>th</sup></var> direction vector. Does nothing if <var>num</var> is non valid. 
=
FgetHalved
0 int
O#f6
Lconst
DReturns the halved property. 
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
FsetHalved
7 void
O#f7
Pnum
0 int
=
DSets the halved property. 
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
FgetHalvedAt
0 int
O#f8
Lconst
DReturns the halved at property. 
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
FsetHalvedAt
7 void
O#f9
Pnum
0 int
=
DSets the halved at property. 
DThe properties <var>halved</var> and <var>halved at</var> are for stacking purposes and define in a stack of n fibers the number of fibers that are half the size of the other fibers (a second fiber is then filling up the space) and the element number when the halved elements first occur.  
=
FgetNext
151 volumeShape*
Svirtual
O#f10
Ptimes
0 int
=
PstackType
0 int
=
DReturns a new volume shape, that is shifted, rotated, shrunk, enlarged, or else modified according to the parameter <var>stackType</var>, generating the <var>times<sup>th</sup></var> element in the stack.     
DTake care, that you delete this shape correctly after use (potential memory leak).     
D<br>These stack types have been implemented:   
D<br><table><tr><td><img src="images/fiber_rectangular.jpg"><td><img src="images/fiber_extended.jpg">   
D<tr><td>rectangular stacking(2)<td>extended rectangular stacking (17)   
D</table>   
=
FgetEnvelope
151 volumeShape*
Svirtual
O#f11
Ptimes
0 int
=
PstackType
0 int
=
DReturns a volume shape, that will be the envelope of <var>times</var> shapes, generated with the getNext-method in stack mode <var>stackType</var>.     
DTake care, that you delete this shape correctly after use (potential memory leak).     
D<br>These stack types have been implemented:   
D<br><table><tr><td><img src="images/fiber_rectangular.jpg"><td><img src="images/fiber_extended.jpg">   
D<tr><td>rectangular stacking(2)<td>extended rectangular stacking (17)   
D</table>   
=
Fdistance
17 vector3D
Svirtual
O#f12
Pline
21 sLine3D&
Sconst
=
DReturns the distance vector from the straight line to the shape.   
=
FNormal
21 sLine3D
Svirtual
O#f13
Pline
21 sLine3D&
Sconst
=
DReturns the hit point of a straigt line with the shape and normal vector of the shape in that point. This is stored in the straight line return value with the Foot-property being the hit point and the Direction-property the normal vector.   
=
FHitting
13 Vector
Svirtual
O#f14
Pline
21 sLine3D&
Sconst
=
DCalculates all characteristics of a hit of a straight line with the volume shape. The return values components will be:   
D<table> 
D<tr><th>index <th>value   
D<tr><td>0, 1, 2 <td>entrance point of line   
D<tr><td>3, 4, 5 <td>distance of line to volume, points to volume   
D<tr><td>6, 7, 8 <td>normal vector to volume in entrance point   
D<tr><td>9 <td>sigma value   
D</table>   
=
Fcut
6 bool
Svirtual
O#f15
Pf
-1 fiber&
Sconst
=
DReturns true, if the shape and the fiber occupy some space commonly.   
=
Foperator=
7 void
Svirtual
O#f16
Ps
151 volumeShape&
Sconst
=
DCopy operator. Only works if the shape is a fiber. 
=
FgetClone
151 volumeShape*
Svirtual
O#f17
DCreates a new instance of the same volume shape with the same properties. Take care, that you delete this shape correctly after use (potential memory leak).   
=
FHitParams
13 Vector
Svirtual
O#f18
Pline
21 sLine3D&
Sconst
=
DReturns the parameters for a hit of a straight line with the shape. The pattern will be:     
D<table>  
D<tr><th>index of return<th>description     
D<tr><td>0<td>sigma value     
D<tr><td>1,2,3<td>entrance point of line/point on line closest to the volume     
D<tr><td>4,5,6<td>resolution vector     
D<tr><td>7,8,9<td>point on volume closest to the line     
D<tr><td>10,11,12<td>minimum distance of line to volume, points to volume     
D</table>     
=
FHitParams
13 Vector
Svirtual
O#f19
Pshape
152 planeShape&
Sconst
=
Porigin
16 point3D
=
DReturns the parameters for a hit of a pyramid like shape with the tip at <var>origin</var> and the <var>shape</var> as base with the shape. The pattern will be:        
D<table>    
D<tr><th>index of return<th>description      
D<tr><td>0<td>sigma value      
D<tr><td>1,2,3<td>entrance point of line/point on line closest to the volume      
D<tr><td>4,5,6<td>resolution vector      
D<tr><td>7,8,9<td>point on volume closest to the line      
D<tr><td>10,11,12<td>minimum distance of line to volume, points to volume      
D</table>        
=
Fentrance
16 point3D
Svirtual
O#f20
Pline
21 sLine3D&
Sconst
=
DReturns the entrance point of the straight line into the shape. This point is undefined if the line does not hit the shape.    
=
FgetFlightPathInShape
1 float
Svirtual
O#f21
Pline
21 sLine3D&
Sconst
=
DCalculates the entrance point and the exit point of the <var>line</var> in the shape and returns the length of the distance of the two points.    
=
Fsuspect
0 int
Svirtual
O#f22
Pline
21 sLine3D&
Sconst
=
PstackType
0 int
=
DAssuming, this fiber is the first one in a stack of shapes generated with the getNext-method in stacking type <var>stackType</var>.     
DThen the straight line <var>line</var> will hit the stack in the element number, that is returned or -1 if it doesn't hit the stack.    
DThis doesn't know about the actual number of elements in this stack, so you'll have to check if the return value exceeds this.    
=
FDraw
7 void
Svirtual
O#f23
Lconst
Peye
16 point3D&
Sconst
=
Pplane
23 plane3D&
Sconst
=
PboundingBox
19 vector4D*
=
PlColor
0 int
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a root-TCanvas.    
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>. It is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.    
=
FDraw
7 void
Svirtual
O#f24
Lconst
Peye
16 point3D&
Sconst
Vpoint3D(0,0,0)
=
Pplane
23 plane3D&
Sconst
Vplane3D(point3D(0,0,1),vector3D(0,0,1))
=
PboundingBox
19 vector4D*
VNULL
=
Pident
-1 TObject**
VNULL
=
PlColor
0 int
V1
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a root-TCanvas.    
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>.    
DIt is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.    
DThe parameter <var>ident</var> will return a pointer to the drawn root-primitive to provide the distance-to-primitive functionality.   
=
Fdescription
129 shape_parameter
Svirtual
O#f25
Lconst
DReturns a parameter with the values of this shape.
=
FgetDescription
129 shape_parameter
Sstatic
O#f26
DStatic Method. Returns a default parameter with all necessary variables defined.
=
S0 1 volumeShape
volumeshape.html
volumeShape
=
