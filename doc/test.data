algorithm_parameter

/home/pion/ehrhardt/data/12/tofPack2/include/algorithmparameter.h
Calgorithm_parameter
121 algorithm_parameter
O#c2
DDefault constructor. 
=
Calgorithm_parameter
121 algorithm_parameter
O#c3
Pap
121 algorithm_parameter&
Sconst
=
DCopy constructor. 
=
Calgorithm_parameter
121 algorithm_parameter
O#c4
Ptmpstring0
-1 string
=
Pid
0 int
=
DConstructor. Sets the name and the ID of the algorithm.
=
Calgorithm_parameter
121 algorithm_parameter
O#c5
Ptmpstring0
-1 string
=
Ptmpint0
-1 int
=
Ptmpint1
-1 int
=
Pid
0 int
V-1
=
DConstructor. Sets the algorithms name, level and category and its ID. 
=
Calgorithm_parameter
121 algorithm_parameter
O#c6
Ptmpstring0
-1 string
=
Ptmpbool0
-1 bool
=
Ptmpint0
-1 int
=
Ptmpint1
-1 int
=
Pid
0 int
V-1
=
DConstructor. Sets the constructors name, weather it is used, its level and category and the ID (-1 by default). 
=
ginUse
6 bool
O#v2
Duse algorithm in analysis when true
=
gcategory
0 int
O#v3
Dcathegory of the algorithm. obsolete.
=
glevel
0 int
O#v4
Dlevel of algorithm. obsolete.
=
gID
0 int
O#v5
DID of the algorithm
=
gintegers
-1 vector<single_parameter<int> >
O#v6
Dvector for storing integer-values for this parameter
=
gfloats
-1 vector<single_parameter<float> >
O#v7
Dvector for storing floating-point-values for this parameter
=
gpoints
-1 vector<single_parameter<point3D> >
O#v8
Dvector for storing 3D-points for this parameter
=
gswitches
-1 vector<single_parameter<bool> >
O#v9
Dvector for storing boolean-values for this parameter
=
gstringes
-1 vector<single_parameter<string> >
O#v10
Dvector for storing strings for this parameter
=
gvectors
-1 vector<single_parameter<vector3D> >
O#v11
Dvector for storing 3D-vectors for this parameter
=
gintVectors
-1 vector<single_parameter<vector<int> > >
O#v12
Dvector for storing integer-value-vectors for this parameter
=
gfloatVectors
-1 vector<single_parameter<vector<float> > >
O#v13
Dvector for storing floating-point variables-vectors for this parameter
=
gstringVectors
-1 vector<single_parameter<vector<string> > >
O#v14
Dvector for storing string-vectors for this parameter
=
galgos
-1 vector<single_parameter<algorithm_parameter> >
O#v15
Dvector for storing algorithm_parameter for this parameter
=
F~algorithm_parameter
-1 virtual
O#f2
DDestructor
=
FsetCategory
7 void
Svirtual
O#f3
Pcat
0 int
=
DSets the category of the parameter in display with the analysis program typeCase. 
=
FgetCategory
0 int
Svirtual
O#f4
Lconst
DReturns the category of the parameter in display with the analysis program typeCase. 
=
FsetLevel
7 void
Svirtual
O#f5
Plev
0 int
=
DSets the level of the parameter in display with the analysis program typeCase. 
=
FgetLevel
0 int
Svirtual
O#f6
Lconst
DReturns the level of the parameter in display with the analysis program typeCase. 
=
FsetUse
7 void
Svirtual
O#f7
Pin
6 bool
=
DSets, if the algorithm described by this parameter should be used in analysis. 
=
FIsUsed
6 bool
Svirtual
O#f8
Lconst
DReturns true, if the algorithm described by this parameter should be used in analysis. 
=
FgetID
0 int
Svirtual
O#f9
Lconst
DReturns the ID of the algorithm. 
=
FsetID
7 void
Svirtual
O#f10
Pid
0 int
=
DSets the ID of the algorithm. 
=
FchangeParam
7 void
Stemplate<class X>
O#f11
Pname
-1 string
=
Pdata
-1 X
=
DTemplate method. Changes the parameter with name <var>name</var>of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter). It gets a new value. 
=
FchangeParam
7 void
Stemplate<class X>
O#f12
Pname
-1 string
=
Pdata[]
6 bool
Sconst
=
Pnum
0 int
=
DTemplate method. Changes the <var>pos<sup>th</sup></var> parameter of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter). It gets a new <var>name</var> and a new value. This only works for the template class QBitArray. 
=
FchangeParam
7 void
Stemplate<class X>
O#f13
Pname
-1 string
=
Pdata
-1 X
=
Ppos
0 int
=
DTemplate method. Changes the <var>pos<sup>th</sup></var> parameter of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter). It gets a new <var>name</var> and a new value. 
=
FgetNumberOfParam
0 int
Stemplate<class X>
O#f14
Lconst
DTemplate method. Removes the number of parameters of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter). 
=
FgetParam
-1 single_parameter<X>
Stemplate<class X>
O#f15
Lconst
Pi
0 int
=
DTemplate method. Returns the <var>i<sup>th</sup></var> parameter of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter) from the list of parameters.  
D<font color="red">Warning: no consistency check, breaks if <var>i</var> is larger than the number of parameters stored for this type.</font> 
=
FgetParam
-1 single_parameter<X>
Stemplate<class X>
O#f16
Lconst
Pnme
-1 string&
Sconst
=
DReturns the first parameter with name <var>nme</var>.
=
FaddParam
7 void
Stemplate<class X>
O#f17
Pdata
-1 single_parameter<X>
=
DTemplate method. Adds a parameter of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter) to the list of parameters. 
=
FpopParam
7 void
Stemplate<class X>
O#f18
DTemplate method. Removes the last parameter of the specified type (bool, int, float,QString, point3D, vector3D, vector<int>, vector<float>, vector<QString>, algorithm_parameter) from the list of parameters. 
=
FremoveParam
7 void
O#f19
PparamName
-1 string&
Sconst
=
DSearches a parameter of that name in the parameter lists, starting with bool, int, float, point3D, vector3D, QString, vector<int>, vector<float>, vector<QString>, algorithm_parameter. If a parameter of that name is found, it is removed and it quits the method.
=
Foperator<
6 bool
O#f20
Pp
121 algorithm_parameter
=
DComparison operator. Returns true if the algorithms ID is smaller the one of <var>p</var>. Needed for the sorting algorithm of the root-TObjArray-class. 
=
Foperator>
6 bool
O#f21
Pp
121 algorithm_parameter
=
DComparison operator. Returns true if the algorithms ID is larger the one of <var>p</var>. Needed for the sorting algorithm of the root-TObjArray-class. 
=
Foperator==
6 bool
O#f22
Pp
121 algorithm_parameter&
Sconst
=
DComparison operator. Returns true if the algorithms ID is equal the one of <var>p</var>. Needed for the sorting algorithm of the root-TObjArray-class. 
=
Foperator<=
6 bool
O#f23
Pp
121 algorithm_parameter
=
DComparison operator. Returns true if the algorithms ID is smaller or equal the one of <var>p</var>. Needed for the sorting algorithm of the root-TObjArray-class. 
=
Foperator>=
6 bool
O#f24
Pp
121 algorithm_parameter
=
DComparison operator. Returns true if the algorithms ID is larger or equal the one of <var>p</var>. Needed for the sorting algorithm of the root-TObjArray-class. 
=
Foperator=
7 void
O#f25
Pp
121 algorithm_parameter&
Sconst
=
DCopy operator. 
=
FtoString
-1 string
O#f26
Lconst
Ppattern
0 int
V1
=
DReturns a string representation of the algorithms parameter, name description, etc. Contains line breaks.  
D<br>pattern = 1: cathegory, level and used status are shown in one line, 
D<br>pattern = 2: cathegory, level and used status are shown with description, 
D<br>pattern = 3: only ID is shown with description, 
D<br>else: only ID is shown. 
D<br>In all modes the parameters are shown.  
=
S0 0 base_parameter
baseparameter.html
=
