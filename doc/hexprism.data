hexPrism
hexprism.html
/users/data12/pion/ehrhardt/tofPack2/include/hexPrism.h
ChexPrism
-1 hexPrism
O#c2
Pc
16 point3D
=
Pthickness
17 vector3D
=
PtoFirstPoint
17 vector3D
=
PkeyWidth
17 vector3D
=
Pst
0 int
=
DConstructor. Sets the properties.<br> 
D<table> 
D<tr><th>parameter<th>description 
D<tr><td>c<td>center of the front hexagon 
D<tr><td>thickness<td>distance vector front to back hexagon 
D<tr><td>toFirstPoint<td>vector from the center to the first corner of the hexagon. 
D<tr><td>keyWidth<td>vector from the center to the middle of one of the edges of the hexagon. 
D<tr><td>st<td>stacking parameter 
D</table> 
DNote, that the three vectors have to be orthogonal. 
=
ChexPrism
-1 hexPrism
O#c3
Ps
151 volumeShape&
Sconst
=
DCopy constructor. Works, if the shape is a hexprism. 
=
ChexPrism
-1 hexPrism
O#c4
Pdescription
129 shape_parameter&
Sconst
=
DConstructor. Creates a hexPrism out of the values of the parameter.
=
gdir1
17 vector3D
O#v2
Dthickness 
=
gdir2
17 vector3D
O#v3
Dcenter to first point 
=
gdir3
17 vector3D
O#v4
Dkey width 
=
gstacki
0 int
O#v5
D
=
F~hexPrism
-1 virtual
O#f2
D
DDestructor
=
FgetDirection
17 vector3D
Svirtual
O#f3
Lconst
Pnum
0 int
=
DReturns the <var>num<sup>th</sup></var> direction of the hexPrism: <br> 
D<var>num</var>=0: thickness<br> 
D<var>num</var>=1: center to first point<br> 
D<var>num</var>=2: key width 
=
FsetDirection
7 void
O#f4
Pnum
0 int
=
Pv
17 vector3D
=
DSets the <var>num<sup>th</sup></var> direction of the hexPrism: <br>   
D<var>num</var>=0: thickness<br>   
D<var>num</var>=1: center to first point<br>   
D<var>num</var>=2: key width 
=
FgetStackingOrder
0 int
O#f5
Lconst
DReturns the stacking parameter. If it is <0, the center shape will be missing. Its absolute number is the number of rings around the center shape, that are thaken into account. 
=
FsetStackingOrder
7 void
O#f6
Pst
0 int
=
DSets the stacking parameter. If it is <0, the center shape will be missing. Its absolute number is the number of rings around the center shape, that are thaken into account. 
=
FgetNext
151 volumeShape*
Svirtual
O#f7
Ptimes
0 int
=
PstackType
0 int
=
DReturns a new volume shape, that is shifted, rotated, shrunk, enlarged, or else modified according to the parameter <var>stackType</var>, generating the <var>times<sup>th</sup></var> element in the stack.     
DTake care, that you delete this shape correctly after use (potential memory leak).<br> 
DThe following <var>stackType</var>s have been defined: 
D<table><tr><th>type<th> 
D<tr><td>2<td>line stacking. The new hexprism is shifted in thickness direction by <var>times</var> the thickness. 
D<tr><td>3<td>Snake stacking. The envelope is a hexprism, the key width depends on the stacking parameter<br>With the stacking parameter <0 the 6 elements that are farest are missing. 
D<tr><td>-3<td>Snake stacking. The envelope is a hexprism without the center element, the key width depends on the stacking parameter<br>With the stacking parameter <0 the 6 elements that are farest are missing. 
D</table> 
=
FgetEnvelope
151 volumeShape*
Svirtual
O#f8
Ptimes
0 int
=
PstackType
0 int
=
DReturns a volume shape, that will be the envelope of <var>times</var> shapes, generated with the getNext-method in stack mode <var>stackType</var>.     
DTake care, that you delete this shape correctly after use (potential memory leak).<br> 
DThe following <var>stackType</var>s have been defined: 
D<table><tr><th>type<th> 
D<tr><td>2<td>line stacking. The thickness is increased in length by <var>times</var> the thickness. 
D<tr><td>3, -3<td>Snake stacking. The envelope is a hexprism, the key width depends on the number of elements 
D</table> 
=
Fentrance
16 point3D
Svirtual
O#f9
Pline
21 sLine3D&
Sconst
=
DReturns the entrance point of the straight line into the shape. This point is undefined if the line does not hit the shape.     
=
Fdistance
17 vector3D
Svirtual
O#f10
Pline
21 sLine3D&
Sconst
=
DReturns the distance vector from the straight line to the shape.     
=
FNormal
21 sLine3D
Svirtual
O#f11
Pline
21 sLine3D&
Sconst
=
DReturns the hit point of a straigt line with the shape and normal vector of the shape in that point. This is stored in the straight line return value with the Foot-property being the hit point and the Direction-property the normal vector.     
=
Fcut
6 bool
Svirtual
O#f12
Pf
-1 fiber&
Sconst
=
DReturns true, if the shape and the fiber occupy some space commonly.     
=
FHitParams
13 Vector
Svirtual
O#f13
Pline
21 sLine3D&
Sconst
=
DReturns the parameters for a hit of a straight line with the shape. The pattern will be: 
D<table> 
D<tr><th>index of return<th>description 
D<tr><td>0<td>sigma value 
D<tr><td>1,2,3<td>entrance point of line/point on line closest to the volume 
D<tr><td>4,5,6<td>resolution vector 
D<tr><td>7,8,9<td>point on volume closest to the line 
D<tr><td>10,11,12<td>minimum distance of line to volume, points to volume 
D</table> 
=
FHitParams
13 Vector
Svirtual
O#f14
Pshape
152 planeShape&
Sconst
=
Porigin
16 point3D
=
DReturns the parameters for a hit of a pyramid like shape with the tip at <var>origin</var> and the <var>shape</var> as base with the shape. The pattern will be:       
D<table>  
D<tr><th>index of return<th>description     
D<tr><td>0<td>sigma value     
D<tr><td>1,2,3<td>entrance point of line/point on line closest to the volume     
D<tr><td>4,5,6<td>resolution vector     
D<tr><td>7,8,9<td>point on volume closest to the line     
D<tr><td>10,11,12<td>minimum distance of line to volume, points to volume     
D</table>       
=
FHitting
13 Vector
Svirtual
O#f15
Pline
21 sLine3D&
Sconst
=
DCalculates all characteristics of a hit of a straight line with the volume shape. The return values components will be:     
D<table>   
D<tr><th>index <th>value     
D<tr><td>0, 1, 2 <td>entrance point of line     
D<tr><td>3, 4, 5 <td>distance of line to volume, points to volume     
D<tr><td>6, 7, 8 <td>normal vector to volume in entrance point     
D<tr><td>9 <td>sigma value     
D</table>     
=
FgetFlightPathInShape
1 float
Svirtual
O#f16
Pline
21 sLine3D&
Sconst
=
DCalculates the entrance point and the exit point of the <var>line</var> in the shape and returns the length of the distance of the two points.     
=
FgetClone
151 volumeShape*
Svirtual
O#f17
DCreates a new instance of the same volume shape with the same properties. Take care, that you delete this shape correctly after use (potential memory leak).     
=
Fsuspect
0 int
Svirtual
O#f18
Pline
21 sLine3D&
Sconst
=
PstackType
0 int
=
DAssuming, this volume shape is the first one in a stack of shapes generated with the getNext-method in stacking type <var>stackType</var>.      
DThen the straight line <var>line</var> will hit the stack in the element number, that is returned or -1 if it doesn't hit the stack.     
DThis doesn't know about the actual number of elements in this stack, so you'll have to check if the return value exceeds this. 
D<br>Works in most cases: if the return value is positive, a hexPrism in the stack is hit. 
=
FDraw
7 void
Svirtual
O#f19
Lconst
Peye
16 point3D&
Sconst
=
Pplane
23 plane3D&
Sconst
=
PboundingBox
19 vector4D*
=
PlColor
0 int
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a root-TCanvas.  
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>.   
D<br>It is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.      
=
FDraw
7 void
Svirtual
O#f20
Lconst
Peye
16 point3D&
Sconst
Vpoint3D(0,0,0)
=
Pplane
23 plane3D&
Sconst
Vplane3D(point3D(0,0,1),vector3D(0,0,1))
=
PboundingBox
19 vector4D*
VNULL
=
Pident
-1 TObject**
VNULL
=
PlColor
0 int
V1
=
PfColor
0 int
V8
=
PfStyle
0 int
V1001
=
DThis function is used for drawing a shape to a root-TCanvas.      
DIt will draw a projection of the 3D shape from the <var>eye</var>-point to a <var>plane</var>. The corners of the drawn shape in canvas coordinates are stored in <var>boundingBox</var>.      
D<br>It is drawn using <var>lColor</var> as line color, <var>fColor</var> as fill color and <var>fStyle</var> as fill style. See <a href="http://root.cern.ch/root/html/TAttFill.html"> root-colors and -styles</a>.      
D<br>The parameter <var>ident</var> will return a pointer to the drawn root-primitive to provide the distance-to-primitive functionality.     
=
Fdescription
129 shape_parameter
Svirtual
O#f21
Lconst
DReturns a parameter describing this hexPrism.
=
FgetDescription
129 shape_parameter
Sstatic
O#f22
DStatic Method. Returns a default description of a hexPrism with all necessary variables defined.
=
S0 1 volumeShape
volumeshape.html
volumeShape
=
