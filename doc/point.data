point
point.html
/users/data12/pion/ehrhardt/tofPack2/include/geometry.h
Cpoint
12 point
O#c2
Pdim
0 int
V0
=
DConstructor set the dimension of the space the point is located in (default =0).
=
Cpoint
12 point
O#c3
Pp
12 point&
Sconst
Tpoint.html
=
DCopy constructor.
=
Cpoint
12 point
O#c4
Pp
14 point2D&
Sconst
Tpoint2d.html
=
DCopy constructor from 2D.
=
Cpoint
12 point
O#c5
Pp
16 point3D&
Sconst
Tpoint3d.html
=
DCopy constructor from 3D.
=
Cpoint
12 point
O#c6
Pp
18 point4D&
Sconst
Tpoint4d.html
=
DCopy constructor from 4D.
=
vdimension
0 int
O#v2
Ddimension of the space the point is located in
=
vinfinityPos
0 int
O#v3
Dposition where there is a first inf-value. obsolete.
=
vv[20]
3 double
O#v4
Dvalues for dimension 0-20
=
vvalue
3 double*
O#v5
Dvalues for dimension 20+
=
F~point
-1 virtual
O#f2
DDestructor
=
FreDimension
7 void
Svirtual
O#f3
PnewDim
0 int
=
DErase all information about position of the point and re-allocate it in <var>newDim</var>-dimensional space.
=
FsetValues
7 void
O#f4
Pvalues[]
3 double
=
DSets all elements of the point in cartesic coordinates. Take care that <var>values</var> is correctly dimensioned.
=
FsetValues
7 void
O#f5
Pf1
3 double
V0
=
Pf2
3 double
V0
=
Pf3
3 double
V0
=
Pf4
3 double
V0
=
Pf5
3 double
V0
=
Pf6
3 double
V0
=
Pf7
3 double
V0
=
Pf8
3 double
V0
=
Pf9
3 double
V0
=
Pf10
3 double
V0
=
Pf11
3 double
V0
=
Pf12
3 double
V0
=
Pf13
3 double
V0
=
Pf14
3 double
V0
=
Pf15
3 double
V0
=
Pf16
3 double
V0
=
Pf17
3 double
V0
=
Pf18
3 double
V0
=
Pf19
3 double
V0
=
Pf20
3 double
V0
=
DSets up to dimension elements in cartesic coordinates. If the dimension is larger than 20 it sets only the 20 first elements.
=
FsetValue
7 void
Svirtual
O#f6
Ppos
0 int
=
PvalueIn
3 double
=
DSetter. Sets the <var>pos<sup>th</sup></var> element of the point in cartesic coordinates to <var>value</var>.
=
FZero
7 void
Svirtual
O#f7
DSets the state of the objet to _zero_. 
=
FgetValue
3 double
Svirtual
O#f8
Lconst
Ppos
0 int
=
DGetter. Returns the <var>pos<sup>th</sup></var> element of the point in cartesic coordinates.
=
FgetDimension
0 int
Svirtual
O#f9
Lconst
DReturns the dimension of the space the point is located in.
=
FgetState
-1 geomState
Svirtual
O#f10
Lconst
DReturns the state of the geometrical object. This can be _regular_, _undefined_, _infinite_ or _zero_. 
=
Foperator=
7 void
O#f11
Pp
12 point&
Sconst
Tpoint.html
=
DCopy operator. Works only if the dimension of this point is equal to the dimension of <var>p</var>.
=
Foperator-
13 Vector
O#f12
Tvector.html
Pq
12 point&
Sconst
Tpoint.html
=
DSubtraction operator. Return the distance vector between point <var>q</var> and this point.
=
Foperator-
12 point
O#f13
Tpoint.html
Pv
13 Vector&
Sconst
Tvector.html
=
DSubtraction operator. Add the vector <var>v</var> multiplied by -1 to the point and return the result.
=
Foperator+
12 point
O#f14
Tpoint.html
Pv
13 Vector&
Sconst
Tvector.html
=
DAddition operator. Add a vector to a point and return the result.
=
Foperator==
0 int
O#f15
Pp
12 point&
Sconst
Tpoint.html
=
DComparison operator. Returns 1 if the dimension as well as the individual elements of the two points are equal.
=
Foperator[]
3 double
Svirtual
O#f16
Lconst
Ppos
0 int
=
DAccess-operator. Returns the <var>pos<sup>th</sup></var> element of the point in cartesic coordinates.
=
FtoString
-1 string
Svirtual
O#f17
Lconst
DReturns a cartesic string representation of the point.
=
DThis class represents a point in n-dimensional space.
S0 1 geomObject
geomobj.html
geomObject
=
