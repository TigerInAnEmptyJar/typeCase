matrix3D
matrix3d.html
/users/data12/pion/ehrhardt/tofPack2/include/geometry.h
Cmatrix3D
24 matrix3D
O#c2
DDefault constructor.
=
Cmatrix3D
24 matrix3D
O#c3
Pm
24 matrix3D&
Sconst
Tmatrix3d.html
=
DCopy constructor.
=
Cmatrix3D
24 matrix3D
O#c4
Paxis
17 vector3D&
Sconst
Tvector3d.html
=
Pangle
3 double
=
DConstructor. Define a rotation matrix to rotate around an <var>axis</var> by an <var>angle</var>.
=
Cmatrix3D
24 matrix3D
O#c5
Pline1
17 vector3D&
Sconst
Tvector3d.html
=
Pline2
17 vector3D&
Sconst
Tvector3d.html
=
Pline3
17 vector3D&
Sconst
Tvector3d.html
=
DConstructor. Sets the elements of the matrix.
=
Cmatrix3D
24 matrix3D
O#c6
Pv1
17 vector3D&
Sconst
Tvector3d.html
=
Pv2
17 vector3D&
Sconst
Tvector3d.html
=
DConstructor. The matrix is set as the dyadic product of the two vectors <var>v1</var> and <var>v2</var>.
=
gdata[9]
3 double
O#v2
D
=
gunit
0 int
O#v3
D
=
greel
0 int
O#v4
D
=
F~matrix3D
-1 virtual
O#f2
DDestructor
=
FgetValue
3 double
O#f3
Lconst
Pline
0 int
=
Pcolumn
0 int
=
DReturns the matrix element in (<var>line</var>,<var>column</var>).
=
FDeterminant
3 double
O#f4
Lconst
DReturns the matrix's determinant.
=
FsetValue
7 void
O#f5
Pline
0 int
=
Pcolumn
0 int
=
Pvalue
3 double
=
DSet the value in <var>line<sup>th</sup></var> line and <var>column<sup>th</sup></var> colum to <var>value</var>.
=
FZero
7 void
O#f6
DSets the state of the object to _zero_. 
=
FUnity
24 matrix3D
Sstatic
O#f7
Tmatrix3d.html
DStatic method. Returns a unit -matrix.
=
FUnitary
0 int
O#f8
Lconst
DReturns true if matrix is unitary.
=
FOrthogonal
0 int
O#f9
Lconst
DReturns true if matrix is orthogonal.
=
FRotate
24 matrix3D
O#f10
Tmatrix3d.html
PfromX
17 vector3D&
Sconst
Tvector3d.html
=
PfromY
17 vector3D&
Sconst
Tvector3d.html
=
PfromZ
17 vector3D&
Sconst
Tvector3d.html
=
PtoX
17 vector3D&
Sconst
Tvector3d.html
=
PtoY
17 vector3D&
Sconst
Tvector3d.html
=
PtoZ
17 vector3D&
Sconst
Tvector3d.html
=
DDefine a rotation matrix. Note this method will need some later work!
=
Foperator=
7 void
O#f11
Pm
24 matrix3D&
Sconst
Tmatrix3d.html
=
DCopy operator.
=
Foperator*
17 vector3D
O#f12
Tvector3d.html
Lconst
Pv
17 vector3D&
Sconst
Tvector3d.html
=
DMultiplication operator. Multiply a vector <var>v</var> to this matrix and return the result. This works only for column vectors.
=
Foperator*
24 matrix3D
O#f13
Tmatrix3d.html
Lconst
Pm
24 matrix3D&
Sconst
Tmatrix3d.html
=
DMultipliclation operator. Multiplies this matrix to matrix <var>m</var> and returns the result. This matrix is left unchanged. 
DNote this is genuine matrix multiplication. Commutation law doesn't apply here.
=
Foperator*
24 matrix3D
O#f14
Tmatrix3d.html
Lconst
Pv
3 double
=
DMultiplication operator. Multiplies <var>v</var> to each element of the matrix and returns the result. This matrix is left unchanged.
=
Foperator+
24 matrix3D
O#f15
Tmatrix3d.html
Lconst
Pm
24 matrix3D&
Sconst
Tmatrix3d.html
=
DAddition operator. Adds <var>m</var> to this matrix and returns the result. This matrix is left unchanged.
=
Foperator-
24 matrix3D
O#f16
Tmatrix3d.html
Lconst
Pm
24 matrix3D&
Sconst
Tmatrix3d.html
=
DSubtraction operator. Subtracts matrix <var>m</var> from this matrix and returns the result. This matrix is left unchanged.
=
Foperator!
24 matrix3D
O#f17
Tmatrix3d.html
Lconst
DTransposition operator. Returns the transposed matrix. This matrix is left unchanged.
=
Foperator-
24 matrix3D
O#f18
Tmatrix3d.html
Lconst
DInversion operator. Return the inverse of this matrix. This matrix is left unchanged.
=
Foperator[]
17 vector3D
Svirtual
O#f19
Tvector3d.html
Lconst
Pnum
0 int
=
DAccess operator. Returns the <var>num<sup>th</sup></var> line of the matrix. To access the individual element you can use: m[line][column].
=
FtoString
-1 string
Svirtual
O#f20
Lconst
DReturns a string representation of the matrix. Contains line breaks.
=
DThis class describes a 3-dimensional rotation matrix. Note that the inversion sometimes doesn't work that well. Use matrixNxM instead.
S0 1 geomObject
geomobj.html
geomObject
=
