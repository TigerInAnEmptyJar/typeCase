#include "logger.h"
#include "tofAnalysis_t.h"
void tofAnalysis::init()
{
    while(!ids.empty())
	ids.pop_back();
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(true);
    ids.push_back(false);
    ids.push_back(false);
    ids.push_back(false);
    ids.push_back(false);
    ids.push_back(false);
    ids.push_back(false);
    ids.push_back(false);
    for(unsigned int i=0;i<ids.size();i++)
    {
	if(ids[i]==false)
	{
	    currID=i;
	    break;
	}
    }
}

int tofAnalysis::getID()
{
    return currID;
}

void tofAnalysis::newID()
{
    ids[currID]=true;
    for(unsigned int i=0;i<ids.size();i++)
    {
	if(ids[i]==false)
	{
	    currID=i;
	    return;
	}
    }
    currID=ids.size();
    ids.push_back(false);
}

vector<string> tofAnalysis::getVariables()
{
    vector<string> ret;
    ret.push_back("param");
    ret.push_back("algorithm_parameter");
    ret.push_back("const");
    ret.push_back("event");
    ret.push_back("TEvent");
    ret.push_back("thread");
    ret.push_back("event.getEventNumber()");
    ret.push_back("int");
    ret.push_back("thread");
    ret.push_back("event.getRunNumber()");
    ret.push_back("int");
    ret.push_back("thread");
    ret.push_back("event.getTrigger()");
    ret.push_back("int");
    ret.push_back("thread");
    ret.push_back("setup");
    ret.push_back("TSetup");
    ret.push_back("run");
    ret.push_back("numberOfHits");
    ret.push_back("int**");
    ret.push_back("thread");
    ret.push_back("numberOfHitClusters");
    ret.push_back("int**");
    ret.push_back("thread");
    ret.push_back("numberOfPixels");
    ret.push_back("int**");
    ret.push_back("thread");
    ret.push_back("numberOfClusters");
    ret.push_back("int**");
    ret.push_back("thread");
    ret.push_back("numberOfTracks");
    ret.push_back("int*");
    ret.push_back("thread");
    ret.push_back("raws");
    ret.push_back("TRawHit***");
    ret.push_back("thread");
    ret.push_back("calibratedHits");
    ret.push_back("TCalibHit***");
    ret.push_back("thread");
    ret.push_back("hitClusters");
    ret.push_back("THitCluster***");
    ret.push_back("thread");
    ret.push_back("pixels");
    ret.push_back("TPixel***");
    ret.push_back("thread");
    ret.push_back("clusters");
    ret.push_back("TCluster***");
    ret.push_back("thread");
    ret.push_back("tracks");
    ret.push_back("TTrack**");
    ret.push_back("thread");
    ret.push_back("event.getMaxNumber<TCalibHit>()");
    ret.push_back("int");
    ret.push_back("const");
    ret.push_back("event.getMaxNumber<TPixel>()");
    ret.push_back("int");
    ret.push_back("const");
    ret.push_back("event.getMaxNumber<TCluster>()");
    ret.push_back("int");
    ret.push_back("const");
    ret.push_back("event.getMaxNumber<TTracks>()");
    ret.push_back("int");
    ret.push_back("const");
    ret.push_back("setup.getNumberOfMaterials()");
    ret.push_back("int");
    ret.push_back("run");
    ret.push_back("setup.getNumberOfDetectors()");
    ret.push_back("int");
    ret.push_back("run");
    ret.push_back("materials");
    ret.push_back("TMaterial**");
    ret.push_back("run");
    ret.push_back("detectors");
    ret.push_back("TDetector**");
    ret.push_back("run");
    ret.push_back("stearIt");
    ret.push_back("QObject*");
    ret.push_back("const");
    ret.push_back("input_mutex");
    ret.push_back("pthread_mutex_t");
    ret.push_back("const");
    ret.push_back("readValid");
    ret.push_back("bool");
    ret.push_back("const");
    return ret;
    ret.push_back("Event");
    ret.push_back("Raws");
    ret.push_back("Raw");
    ret.push_back("CalibratedHits");
    ret.push_back("CalibratedHit");
    ret.push_back("Tracks");
    ret.push_back("Track");
    ret.push_back("Pixels");
    ret.push_back("Pixel");
    ret.push_back("Clusters");
    ret.push_back("Cluster");
    ret.push_back("NumberOfHits");
    ret.push_back("NumberOfTracks");
    ret.push_back("NumberOfPixels");
    ret.push_back("NumberOfClusters");
    ret.push_back("Particle");
    ret.push_back("Particles");
    ret.push_back("ElementShape");
    ret.push_back("ElementShapes");
    ret.push_back("ADCoffsetsI");
    ret.push_back("ADCoffsetsF");
    ret.push_back("TDCoffsetsI");
    ret.push_back("TDCoffsetsF");
    ret.push_back("ADCfactorsI");
    ret.push_back("ADCfactorsF");
    ret.push_back("TDCfactorsI");
    ret.push_back("TDCfactorsF");
    ret.push_back("Setup");
    ret.push_back("Material");
    ret.push_back("Materials");
    ret.push_back("Detector");
    ret.push_back("Detectors");
    ret.push_back("OutPut");
    ret.push_back("numberOfDetectors");
    ret.push_back("numberOfMaterials");
    ret.push_back("tmpInteger");
    ret.push_back("tmpFloatingPoint");
    ret.push_back("tmpstring");
    ret.push_back("tmpPoint3D");
    ret.push_back("tmpVector3D");
    ret.push_back("tmpVolumeShape");
    ret.push_back("tmpPlaneShape");
    ret.push_back("tmpRawHit");
    ret.push_back("tmpCalibHit");
    ret.push_back("tmpPixel");
    ret.push_back("tmpCluster");
    ret.push_back("tmpTrack");
    ret.push_back("tmpParticle");
    ret.push_back("tmpParameterI");
    ret.push_back("tmpParameterF");
    ret.push_back("tmpIntegers");
    ret.push_back("tmpFloatingPoints");
    ret.push_back("tmpstrings");
    ret.push_back("tmpPoint3Ds");
    ret.push_back("tmpVector3Ds");
    ret.push_back("tmpVolumeShapes");
    ret.push_back("tmpPlaneShapes");
    ret.push_back("tmpRawHits");
    ret.push_back("tmpCalibHits");
    ret.push_back("tmpPixels");
    ret.push_back("tmpClusters");
    ret.push_back("tmpTracks");
    ret.push_back("tmpParticles");
    ret.push_back("tmpParameterIs");
    ret.push_back("tmpParameterFs");
    ret.push_back("tmpOutPut");
    return ret;
    return ret;
}

vector<string> tofAnalysis::getTheTypes()
{
    vector<string> ret;
    ret.push_back("event");
    ret.push_back("rawHit*");
    ret.push_back("rawHit");
    ret.push_back("calibHit*");
    ret.push_back("calibHit");
    ret.push_back("track*");
    ret.push_back("track");
    ret.push_back("pixel*");
    ret.push_back("pixel");
    ret.push_back("cluster*");
    ret.push_back("cluster");
    ret.push_back("int");
    ret.push_back("int");
    ret.push_back("int");
    ret.push_back("int");
    ret.push_back("momentum4D");
    ret.push_back("momentum4D*");
    ret.push_back("volumeShape*");
    ret.push_back("volumeShape**");
    ret.push_back("parameter<int>");
    ret.push_back("parameter<float>");
    ret.push_back("parameter<int>");
    ret.push_back("parameter<float>");
    ret.push_back("parameter<int>");
    ret.push_back("parameter<float>");
    ret.push_back("parameter<int>");
    ret.push_back("parameter<float>");
    ret.push_back("setup");
    ret.push_back("material");
    ret.push_back("material*");
    ret.push_back("detector");
    ret.push_back("detector*");
    ret.push_back("ostream");
    ret.push_back("int");
    ret.push_back("int");
    
    ret.push_back("int");
    ret.push_back("float");
    ret.push_back("string");
    ret.push_back("point3D");
    ret.push_back("vector3D");
    ret.push_back("volumeShape*");
    ret.push_back("planeShape*");
    ret.push_back("rawHit");
    ret.push_back("calibHit");
    ret.push_back("pixel");
    ret.push_back("cluster");
    ret.push_back("track");
    ret.push_back("momentum4D");
    ret.push_back("parameter<int>");
    ret.push_back("parameter<float>");
    ret.push_back("int*");
    ret.push_back("float*");
    ret.push_back("string*");
    ret.push_back("point3D*");
    ret.push_back("vector3D*");
    ret.push_back("volumeShape**");
    ret.push_back("planeShape**");
    ret.push_back("rawHit*");
    ret.push_back("calibHit*");
    ret.push_back("pixel*");
    ret.push_back("cluster*");
    ret.push_back("track*");
    ret.push_back("momentum4D*");
    ret.push_back("parameter<int>*");
    ret.push_back("parameter<float>*");
    ret.push_back("ostream");
    return ret;
}

vector<int> tofAnalysis::getTheVID()
{
    vector<int> ret;
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(2);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(4);
    ret.push_back(1);
    ret.push_back(1);
    ret.push_back(1);
    
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(6);
    ret.push_back(6);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(5);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(7);
    ret.push_back(5);
    return ret;
}
